{"/home/travis/build/npmtest/node-npmtest-gulp-html2js/test.js":"/* istanbul instrument in package npmtest_gulp_html2js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-html2js/lib.npmtest_gulp_html2js.js":"/* istanbul instrument in package npmtest_gulp_html2js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_html2js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_html2js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-html2js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-html2js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_html2js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_html2js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_html2js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_html2js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_html2js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_html2js.__dirname + '/lib.npmtest_gulp_html2js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-html2js/node_modules/gulp-html2js/index.js":"'use strict';\n\nvar through = require('through2');\nvar path = require('path');\nvar gutil = require('gulp-util');\nvar htmlToJs = require('./lib/compile');\nvar PluginError = gutil.PluginError;\nvar File = gutil.File;\nvar PLUGIN_NAME = 'gulp-html2js';\n\n// file can be a vinyl file object or a string\n// when a string it will construct a new one\nmodule.exports = function (file, opt) {\n    if (!file) {\n        throw new PluginError(PLUGIN_NAME, 'Missing file option for gulp-html-to-js');\n    }\n    var opt = opt || {};\n    opt.base = opt.base || '.'\n    opt.quoteChar = opt.quoteChar || '\"'\n    opt.indentString = opt.indentString || '  '\n    opt.target = opt.target || ''\n    opt.htmlmin = opt.htmlmin || {}\n    opt.useStrict = opt.useStrict || false\n    opt.outputModuleName = opt.outputModuleName || false;\n    opt.separator = gutil.linefeed;\n\n    var _module,\n        latestFile,\n        latestMod;\n\n    return through.obj(function (file, enc, cb) {\n        // ignore empty files\n        if (file.isNull()) {\n            cb();\n            return;\n        }\n        if (!latestMod || file.stat && file.stat.mtime > latestMod) {\n            latestFile = file;\n            latestMod = file.stat && file.stat.mtime;\n        }\n\n        // we don't do streams (yet)\n        if (file.isStream()) {\n            this.emit('error', new PluginError(PLUGIN_NAME, 'Streaming not supported'));\n            cb();\n            return;\n        }\n        // construct concat instance\n        if (!_module) {\n            _module = new htmlToJs(opt);\n        }\n        // add file to concat instance\n        _module.add(file.path, file.contents.toString());\n        cb();\n    }, function (cb) {\n        // no files passed in, no file goes out\n        if (!latestFile || !_module) {\n            cb();\n            return;\n        }\n\n\n        var joinedFile;\n\n        // if file opt was a file path\n        // clone everything from the latest file\n        if (typeof file === 'string') {\n            joinedFile = latestFile.clone({contents: false});\n            joinedFile.path = path.join(latestFile.base, file);\n        } else {\n            joinedFile = new File(file);\n        }\n\n        joinedFile.contents = _module.content;\n        this.push(joinedFile);\n        cb();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-html2js/node_modules/gulp-html2js/lib/compile.js":"var path = require('path')\nvar NGAdapter = require('./adapters/angular')\nvar JSAdapter = require('./adapters/javascript')\n\nvar normalizePath = function (p) {\n    return path.sep !== '/' ? p.replace(/\\\\/g, '/') : p;\n}\n\nfunction html2js(opt) {\n    this.opt = opt || {};\n    this.opt.base = this.opt.base || './';\n    this.adapter;\n    this.contentParts = [];\n    this.separator = new Buffer(opt.separator || ',');\n    this.getAdapter();\n}\nhtml2js.prototype.add = function (filePath, content) {\n    filePath = filePath && normalizePath(filePath);\n\n    var filePath = normalizePath(path.relative(this.opt.base, filePath))\n\n    if (typeof this.opt.rename === 'function') {\n        filePath = this.opt.rename(filePath)\n    }\n\n    if (this.contentParts.length) {\n        this.contentParts.push(this.separator);\n    }\n\n    this.contentParts.push(new Buffer(this.adapter.getFile(filePath, content)));\n};\nhtml2js.prototype.getAdapter = function () {\n\n    if (this.adapter) return this.adapter;\n\n    switch (this.opt.adapter) {\n        case 'angular':\n        default:\n            this.adapter = new NGAdapter(this.opt);\n            break;\n        case 'javascript':\n            this.adapter = new JSAdapter(this.opt);\n            break;\n    }\n    this.contentParts = [new Buffer(this.adapter.getHeader())];\n    return this.adapter;\n}\n\nObject.defineProperty(html2js.prototype, 'content', {\n    get: function () {\n        this.contentParts.push(new Buffer(this.adapter.getFooter()));\n        return Buffer.concat(this.contentParts);\n    }\n});\nmodule.exports = html2js;","/home/travis/build/npmtest/node-npmtest-gulp-html2js/node_modules/gulp-html2js/lib/adapters/angular.js":"'use strict';\r\nfunction NGAdapter(opt) {\r\n    this.opt = opt || {};\r\n    this.opt.name = opt.name || '_html_';\r\n    this.contentParts = [];\r\n    this.separator = new Buffer(opt.separator);\r\n};\r\n\r\nNGAdapter.prototype.getHeader = function () {\r\n    return '//HEAD ' + \"\\n\" +\r\n        '(function(app) {' + \"\\n\" +\r\n        'try { app = angular.module(\"' + this.opt.name + '\"); }' + \"\\n\" +\r\n        'catch(err) { app = angular.module(\"' + this.opt.name + '\", []); }' + \"\\n\" +\r\n        'app.run([\"$templateCache\", function($templateCache) {' + \"\\n\" +\r\n        '\"use strict\";' + \"\\n\";\r\n};\r\n\r\nNGAdapter.prototype.getFile = function (file, content) {\r\n    return '$templateCache.put(\"' + file + '\",\"' + this.escapeContent(content) + '\")' + \"\\n\";\r\n};\r\n\r\nNGAdapter.prototype.getFooter = function () {\r\n    return '}]);' + \"\\n\" + '})();';\r\n};\r\nNGAdapter.prototype.escapeContent = function (content) {\r\n    var quoteChar = '\"';\r\n    var indentString = \"  \";\r\n    var bsRegexp = new RegExp('\\\\\\\\', 'g');\r\n    var quoteRegexp = new RegExp('\\\\' + quoteChar, 'g');\r\n    var nlReplace = '\\\\n' + quoteChar + ' +\\n' + indentString + indentString + quoteChar;\r\n    return content.replace(bsRegexp, '\\\\\\\\').replace(quoteRegexp, '\\\\' + quoteChar).replace(/\\r?\\n/g, nlReplace);\r\n}\r\nmodule.exports = NGAdapter;\r\n","/home/travis/build/npmtest/node-npmtest-gulp-html2js/node_modules/gulp-html2js/lib/adapters/javascript.js":"'use strict';\r\nfunction JSAdapter(opt) {\r\n    this.opt = opt || {};\r\n    this.opt.name = opt.name || '_html_';\r\n    this.lineOffset = 0;\r\n    this.contentParts = [];\r\n    this.separator = new Buffer(opt.separator);\r\n};\r\n\r\nJSAdapter.prototype.getHeader = function () {\r\n    return '//HEAD ' + \"\\n\" +\r\n        'window[\"' + this.opt.name + '\"] = {};' + \"\\n\";\r\n};\r\n\r\nJSAdapter.prototype.getFile = function (file, content) {\r\n    return 'window[\"' + this.opt.name + '\"][\"' + file + '\"] = \"' + (Buffer.isBuffer(content) ? content : new Buffer(this.escapeContent(content))) + '\"; ' + \"\\n\";\r\n};\r\n\r\nJSAdapter.prototype.getFooter = function () {\r\n    return \"// END \";\r\n};\r\nJSAdapter.prototype.escapeContent = function (content) {\r\n    var quoteChar = '\"';\r\n    var indentString = \"  \";\r\n    var bsRegexp = new RegExp('\\\\\\\\', 'g');\r\n    var quoteRegexp = new RegExp('\\\\' + quoteChar, 'g');\r\n    var nlReplace = '\\\\n' + quoteChar + ' +\\n' + indentString + indentString + quoteChar;\r\n    return content.replace(bsRegexp, '\\\\\\\\').replace(quoteRegexp, '\\\\' + quoteChar).replace(/\\r?\\n/g, nlReplace);\r\n}\r\nmodule.exports = JSAdapter;","/home/travis/build/npmtest/node-npmtest-gulp-html2js/node_modules/gulp-html2js/lib/utils.js":"/*\n * This part comes from grunt library.\n * See more from https://github.com/gruntjs/grunt/tree/master/lib/grunt\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n */\n\nvar gutil = require('gulp-util')\nvar fs = require('fs')\nvar path = require('path')\n\nvar utils = module.exports = {}\n\n// What \"kind\" is a value?\n// I really need to rework https://github.com/cowboy/javascript-getclass\nvar kindsOf = {}\n'Number String Boolean Function RegExp Array Date Error'.split(' ').forEach(function(k) {\n  kindsOf['[object ' + k + ']'] = k.toLowerCase()\n})\nutils.kindOf = function(value) {\n  // Null or undefined.\n  if (value == null) { return String(value) }\n  // Everything else.\n  return kindsOf[kindsOf.toString.call(value)] || 'object'\n}\n\n// The line feed char for the current system.\nutils.linefeed = process.platform === 'win32' ? '\\r\\n' : '\\n'\n\n// Normalize linefeeds in a string.\nutils.normalizelf = function(str) {\n  return str.replace(/\\r\\n|\\n/g, utils.linefeed)\n}\n"}